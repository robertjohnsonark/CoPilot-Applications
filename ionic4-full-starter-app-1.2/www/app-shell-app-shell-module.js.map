{"version":3,"sources":["webpack:///./src/app/showcase/app-shell/app-shell.module.ts","webpack:///./src/app/showcase/app-shell/app-shell.page.html","webpack:///./src/app/showcase/app-shell/app-shell.page.scss","webpack:///./src/app/showcase/app-shell/app-shell.page.ts","webpack:///./src/app/utils/shell-provider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAyC;AACM;AACF;AACU;AACC;AAEX;AAEyB;AAEtB;AACM;AAEtD,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,4DAAY;KACxB;CACF,CAAC;AAkBF;IAAA;IAA6B,CAAC;IAAjB,cAAc;QAhB1B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,0DAAW;gBACX,0DAAW;gBACX,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;gBAC7B,8EAAgB;gBAChB,qEAAgB;aACjB;YACD,YAAY,EAAE;gBACZ,4DAAY;aACb;YACD,SAAS,EAAE;gBACT,iEAAe;aAChB;SACF,CAAC;OACW,cAAc,CAAG;IAAD,qBAAC;CAAA;AAAH;;;;;;;;;;;;ACpC3B,6fAA6f,oBAAoB,mfAAmf,oBAAoB,+JAA+J,sBAAsB,kBAAkB,MAAM,cAAc,iCAAiC,cAAc,MAAM,YAAY,QAAQ,sDAAsD,SAAS,UAAU,qBAAqB,WAAW,QAAQ,6CAA6C,kBAAkB,0CAA0C,SAAS,qCAAqC,0CAA0C,gBAAgB,orBAAorB,yCAAyC,IAAI,oBAAoB,yCAAyC,kBAAkB,0CAA0C,SAAS,sKAAsK,sEAAsE,IAAI,oBAAoB,yCAAyC,kBAAkB,0CAA0C,SAAS,6LAA6L,uEAAuE,IAAI,oBAAoB,yCAAyC,kBAAkB,0CAA0C,SAAS,ocAAoc,+IAA+I,IAAI,oBAAoB,yCAAyC,kBAAkB,0CAA0C,SAAS,6bAA6b,+DAA+D,UAAU,yCAAyC,kBAAkB,0CAA0C,SAAS,iGAAiG,iJAAiJ,gEAAgE,UAAU,yCAAyC,kBAAkB,0CAA0C,SAAS,kGAAkG,8OAA8O,uCAAuC,2CAA2C,UAAU,yCAAyC,kBAAkB,0CAA0C,SAAS,yEAAyE,sCAAsC,mTAAmT,+DAA+D,2DAA2D,UAAU,yCAAyC,kBAAkB,0CAA0C,SAAS,+GAA+G,mEAAmE,0LAA0L,wCAAwC,UAAU,iFAAiF,kBAAkB,8CAA8C,SAAS,8EAA8E,8LAA8L,kBAAkB,8CAA8C,SAAS,8EAA8E,gTAAgT,mBAAmB,sTAAsT,6FAA6F,cAAc,iCAAiC,cAAc,MAAM,2BAA2B,qBAAqB,WAAW,oBAAoB,wJAAwJ,SAAS,wCAAwC,23BAA23B,kBAAkB,0CAA0C,SAAS,ubAAub,kBAAkB,0CAA0C,SAAS,41BAA41B,kBAAkB,qKAAqK,SAAS,0WAA0W,wCAAwC,UAAU,yCAAyC,kBAAkB,wEAAwE,0IAA0I,SAAS,4NAA4N,oBAAoB,8RAA8R,mBAAmB,0BAA0B,oBAAoB,+CAA+C,iCAAiC,cAAc,MAAM,cAAc,+DAA+D,IAAI,oBAAoB,WAAW,qBAAqB,6CAA6C,kBAAkB,0CAA0C,SAAS,2PAA2P,oBAAoB,6BAA6B,mBAAmB,uEAAuE,6FAA6F,aAAa,iCAAiC,cAAc,MAAM,kCAAkC,qBAAqB,YAAY,oBAAoB,oJAAoJ,SAAS,wCAAwC,ucAAuc,kBAAkB,keAAke,kcAAkc,eAAe,0LAA0L,eAAe,wQAAwQ,eAAe,aAAa,kBAAkB,6LAA6L,SAAS,8CAA8C,uXAAuX,eAAe,iNAAiN,eAAe,+RAA+R,eAAe,aAAa,kBAAkB,2LAA2L,SAAS,8CAA8C,8YAA8Y,eAAe,iNAAiN,eAAe,+RAA+R,eAAe,aAAa,kBAAkB,yLAAyL,SAAS,8CAA8C,8UAA8U,kBAAkB,4XAA4X,gCAAgC,uCAAuC,sCAAsC,YAAY,UAAU,6NAA6N,MAAM,UAAU,8BAA8B,IAAI,mBAAmB,QAAQ,OAAO,YAAY,MAAM,UAAU,8BAA8B,IAAI,mBAAmB,QAAQ,OAAO,YAAY,MAAM,UAAU,8BAA8B,IAAI,mBAAmB,QAAQ,OAAO,YAAY,MAAM,UAAU,8BAA8B,IAAI,mBAAmB,QAAQ,OAAO,YAAY,MAAM,UAAU,8BAA8B,IAAI,mBAAmB,QAAQ,OAAO,0rBAA0rB,KAAK,UAAU,iDAAiD,IAAI,mBAAmB,QAAQ,MAAM,qFAAqF,gSAAgS,KAAK,UAAU,wEAAwE,IAAI,mBAAmB,QAAQ,MAAM,qFAAqF,gGAAgG,KAAK,UAAU,wEAAwE,IAAI,mBAAmB,QAAQ,MAAM,4CAA4C,oCAAoC,2CAA2C,UAAU,0CAA0C,kBAAkB,0EAA0E,+BAA+B,ooBAAooB,sDAAsD,UAAU,wGAAwG,8LAA8L,uCAAuC,uCAAuC,UAAU,0CAA0C,qBAAqB,sEAAsE,kCAAkC,8PAA8P,2CAA2C,uCAAuC,gEAAgE,0DAA0D,UAAU,0CAA0C,qBAAqB,sFAAsF,6CAA6C,sEAAsE,gEAAgE,uJAAuJ,qCAAqC,UAAU,uFAAuF,2GAA2G,qCAAqC,UAAU,sFAAsF,+BAA+B,oZAAoZ,eAAe,cAAc,oLAAoL,SAAS,4CAA4C,oBAAoB,6MAA6M,SAAS,uOAAuO,kdAAkd,wBAAwB,wEAAwE,eAAe,cAAc,0OAA0O,SAAS,4CAA4C,oBAAoB,aAAa,iMAAiM,SAAS,8PAA8P,owBAAowB,eAAe,cAAc,qPAAqP,SAAS,4CAA4C,oBAAoB,aAAa,iMAAiM,SAAS,yQAAyQ,2c;;;;;;;;;;;ACA942B,qCAAqC,wCAAwC,EAAE,wCAAwC,+CAA+C,yCAAyC,gCAAgC,uBAAuB,0BAA0B,EAAE,yCAAyC,8BAA8B,EAAE,2BAA2B,sBAAsB,uBAAuB,oBAAoB,EAAE,4BAA4B,qBAAqB,uBAAuB,EAAE,+CAA+C,+xC;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAhhB;AACA;AAEC;AACQ;AAEA;AAE3D,iDAAiD;AACjD,qBAAqB;AACrB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,yBAAyB;AACzB,IAAI;AAEJ,mDAAmD;AACnD,gEAAgE;AAOhE;IAkCE,sBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAjCpC,wBAAmB,GAAG,EAAE,CAAC;QAqBzB,0GAA0G;QAC1G,yCAAyC;QACzC,qDAAqD;QAErD,4DAA4D;QAC5D,8BAAyB,GAAG,IAAI,CAAC;QACjC,yBAAoB,GAAG,CAAC,CAAC;QAGzB,gDAAgD;QAChD,gCAA2B,GAAG,IAAI,CAAC;IAEK,CAAC;IAEzC,+BAAQ,GAAR;QACE,IAAI,CAAC,wBAAwB,CAAC,EAAE,CAAC,CAAC;QAClC,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC/B,CAAC;IAED,+CAAwB,GAAxB,UAAyB,SAAiB;QAA1C,iBA2CC;QA1CC,qFAAqF;QACrF,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAE5B,sDAAsD;QACtD,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;QAEtC,wEAAwE;QACxE,IAAI,CAAC,oBAAoB,GAAG,SAAS,CAAC;QACtC,IAAI,CAAC,mBAAmB,GAAG,qDAAQ,CAAC,IAAI,CAAC,CAAC;QAE1C,oIAAoI;QACpI,IAAM,MAAM,GAAG,kDAAK,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC;QACvC,oDAAoD;QACpD,IAAI,CAAC,mBAAmB;aACvB,IAAI,CACH,gEAAS,CAAC,MAAM,CAAC,EACjB,+DAAQ,CAAC,cAAM,YAAI,CAAC,yBAAyB,GAAG,KAAK,EAAtC,CAAsC,CAAC,CACvD;aACA,SAAS,CAAC;YACT,IAAI,EAAE;gBACJ,KAAI,CAAC,oBAAoB,EAAG,CAAC;YAC/B,CAAC;YACD,QAAQ,EAAE;gBACR,KAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC;gBAC9B,2DAA2D;gBAC3D,0GAA0G;gBAC1G,qEAAqE;gBACrE,iFAAiF;gBACjF,KAAI,CAAC,IAAI,CAAC,GAAG,CAKV,0CAA0C,CAAC;qBAC7C,IAAI,CACH,2DAAI,CAAC,CAAC,CAAC,CAAC,+BAA+B;iBACxC,CAAC,SAAS,CAAC,aAAG;oBACb,OAAO,CAAC,GAAG,CAAC,0CAA0C,EAAE,GAAG,CAAC,CAAC;oBAC7D,KAAI,CAAC,eAAe,GAAG,GAAG,CAAC;gBAC7B,CAAC,CAAC,CAAC;YACL,CAAC;SACF,CAAC,CAAC;IACL,CAAC;IAED,4CAAqB,GAArB;QAAA,iBAiCC;QAhCC,sDAAsD;QACtD,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC;QAExC,IAAM,WAAW,GAKb;YACF,KAAK,EAAE,EAAE;YACT,KAAK,EAAE,EAAE;YACT,KAAK,EAAE,EAAE;YACT,WAAW,EAAE,EAAE;SAChB,CAAC;QAEF,IAAM,aAAa,GAAG,IAAI,mEAAa,CACrC,WAAW,EACX,IAAI,CAAC,IAAI,CAAC,GAAG,CAKV,0CAA0C,CAAC;QAC9C,0GAA0G;QAC1G,qEAAqE;QACrE,iFAAiF;SAClF,CAAC;QAEF,IAAI,CAAC,iBAAiB,GAAG,aAAa,CAAC,UAAU,CAAC,IAAI,CACpD,2DAAI,CAAC,CAAC,CAAC,EAAE,4HAA4H;QACrI,+DAAQ,CAAC,cAAM,YAAI,CAAC,2BAA2B,GAAG,KAAK,EAAxC,CAAwC,CAAC,CACzD,CAAC;IACJ,CAAC;IAvHU,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,oBAAoB;YAC9B,8GAAoC;;SAErC,CAAC;yCAmC0B,+DAAU;OAlCzB,YAAY,CAwHxB;IAAD,mBAAC;CAAA;AAxHwB;;;;;;;;;;;;;ACxBzB;AAAA;AAAA;AAAA;AAAA;AAAiE;AACnB;AAEe;AAE7D;IAcE,uBAAY,UAAa,EAAE,cAA6B;QAAxD,iBAqCC;QA3CD,4GAA4G;QAC5G,oFAAoF;QAC5E,iBAAY,GAAG,CAAC,qEAAW,IAAI,qEAAW,CAAC,KAAK,IAAI,qEAAW,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,qEAAW,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;QACjI,yEAAyE;QACjE,cAAS,GAAG,CAAC,qEAAW,IAAI,qEAAW,CAAC,KAAK,IAAI,qEAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,qEAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC;QAGlH,2CAA2C;QAC3C,IAAM,cAAc,GAAG,CAAC,UAAU,IAAI,UAAU,CAAC,WAAW,IAAI,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,eAAe,CAAC;QAE7I,sCAAsC;QACtC,OAAO,CAAC,IAAI,CAAC,GAAG,GAAG,cAAc,GAAG,2BAA2B,CAAC,CAAC;QACjE,2CAA2C;QAC3C,IAAI,CAAC,QAAQ,GAAG,IAAI,oDAAe,CAAI,UAAU,CAAC,CAAC;QAEnD,IAAM,eAAe,GAAG,+CAAE,CAAC,IAAI,CAAC,CAAC,IAAI,CACnC,4DAAK,CAAC,IAAI,CAAC,YAAY,CAAC;QACxB,2DAA2D;SAC5D,CAAC;QAEF,cAAc,CAAC,IAAI,CACjB,4DAAK,EAAE,CAAC,4EAA4E;QACpF,0DAA0D;SAC3D,CAAC;QAEF,wFAAwF;QACxF,0HAA0H;QAC1H,IAAM,iBAAiB,GAAG,qDAAQ,CAChC,eAAe,EACf,cAAc,CACf;aACA,IAAI;QACH,6DAA6D;SAC9D;aACA,SAAS,CAAC,UAAC,EAAqC;gBAApC,kBAAU,EAAE,iBAAS;YAChC,IAAI,CAAC,KAAI,CAAC,SAAS,EAAE;gBACnB,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC9B,sCAAsC;gBACtC,OAAO,CAAC,OAAO,CAAC,GAAG,GAAG,cAAc,GAAG,2BAA2B,CAAC,CAAC;aACrE;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC;IAClD,CAAC;IAED,sBAAW,qCAAU;aAArB;YACE,OAAO,IAAI,CAAC,WAAW,CAAC;QAC1B,CAAC;;;OAAA;IACH,oBAAC;AAAD,CAAC","file":"app-shell-app-shell-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { ComponentsModule } from '../../components/components.module';\r\n\r\nimport { AppShellPage } from './app-shell.page';\r\nimport { ShowcaseService } from '../showcase.service';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AppShellPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    RouterModule.forChild(routes),\r\n    ComponentsModule,\r\n    HttpClientModule\r\n  ],\r\n  declarations: [\r\n    AppShellPage\r\n  ],\r\n  providers: [\r\n    ShowcaseService\r\n  ]\r\n})\r\nexport class AppShellModule {}\r\n","module.exports = \"<ion-header>\\r\\n  <ion-toolbar color=\\\"primary\\\">\\r\\n    <ion-buttons slot=\\\"start\\\">\\r\\n      <ion-menu-button></ion-menu-button>\\r\\n    </ion-buttons>\\r\\n    <ion-title>\\r\\n      App Shell Components\\r\\n    </ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content class=\\\"showcase-content\\\">\\r\\n  <ion-item-divider sticky=\\\"true\\\">\\r\\n    <ion-label>Aspect Ratio</ion-label>\\r\\n  </ion-item-divider>\\r\\n  <section class=\\\"showcase-section\\\">\\r\\n    <p>\\r\\n      The <code>&lt;app-aspect-ratio&gt;</code> is a simple component that ensures a block will maintain the specified aspect ratio.\\r\\n    </p>\\r\\n    <p>\\r\\n      It uses an <a href=\\\"http://stackoverflow.com/a/10441480/1116959\\\" target=\\\"_blank\\\">old CSS technique</a> to adjust the height of the element based on its width (using padding-bottom).\\r\\n    </p>\\r\\n    <p>\\r\\n      This is a very handy component to prevent content from jumping around while the page is loading.\\r\\n    </p>\\r\\n    <p>\\r\\n      <b>Note:</b> The <code>&lt;app-aspect-ratio&gt;</code> component must be surrounded by a container element with a defined width, as this component will fill the parent width.\\r\\n    </p>\\r\\n<pre>\\r\\n<b>&lt;div style=\\\"width:80%; margin: 0px auto;\\\"&gt;</b>\\r\\n  &lt;app-aspect-ratio [ratio]=\\\"&#123;w:2, h:1&#125;\\\"&gt;\\r\\n    &lt;span&gt;This container will always have a 2:1 aspect ratio&lt;/span&gt;\\r\\n  &lt;/app-aspect-ratio&gt;\\r\\n<b>&lt;/div&gt;</b>\\r\\n</pre>\\r\\n    <div style=\\\"width:80%; margin: 0px auto;\\\">\\r\\n      <app-aspect-ratio [ratio]=\\\"{w:2, h:1}\\\" style=\\\"background-color: #00AFFF;\\\">\\r\\n        <span style=\\\"margin: 10px; display: block;\\\">This container will always have a <b>2:1</b> aspect ratio</span>\\r\\n      </app-aspect-ratio>\\r\\n    </div>\\r\\n  </section>\\r\\n\\r\\n  <ion-item-divider sticky=\\\"true\\\">\\r\\n    <ion-label>Image Shell</ion-label>\\r\\n  </ion-item-divider>\\r\\n  <section class=\\\"showcase-section\\\">\\r\\n    <p>\\r\\n      This component enables to preload an image with an elegant shell.\\r\\n    </p>\\r\\n  </section>\\r\\n  <section class=\\\"showcase-section\\\">\\r\\n    <h5>Set different animation options</h5>\\r\\n    <p>\\r\\n      You can choose between <b>no animation</b> (default), <b>spinner animation</b>, and <b>gradient background</b> animation\\r\\n    </p>\\r\\n    <h4>No animation (default)</h4>\\r\\n<pre>\\r\\n&lt;app-image-shell [src]=\\\"\\\" [alt]=\\\"\\\"&gt;&lt;/app-image-shell&gt;\\r\\n</pre>\\r\\n    <div style=\\\"width:30%; margin: 0px auto;\\\">\\r\\n      <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\r\\n        <app-image-shell [src]=\\\"\\\" [alt]=\\\"\\\"></app-image-shell>\\r\\n      </app-aspect-ratio>\\r\\n    </div>\\r\\n    <h4>Spinner animation</h4>\\r\\n<pre>\\r\\n&lt;app-image-shell <b>animation=\\\"spinner\\\"</b> [src]=\\\"\\\" [alt]=\\\"\\\"&gt;&lt;/app-image-shell&gt;\\r\\n</pre>\\r\\n    <div style=\\\"width:30%; margin: 0px auto;\\\">\\r\\n      <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\r\\n        <app-image-shell animation=\\\"spinner\\\" [src]=\\\"\\\" [alt]=\\\"\\\"></app-image-shell>\\r\\n      </app-aspect-ratio>\\r\\n    </div>\\r\\n    <h4>Gradient animation</h4>\\r\\n<pre>\\r\\n&lt;app-image-shell <b>animation=\\\"gradient\\\"</b> [src]=\\\"\\\" [alt]=\\\"\\\"&gt;&lt;/app-image-shell&gt;\\r\\n</pre>\\r\\n    <div style=\\\"width:30%; margin: 0px auto;\\\">\\r\\n      <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\r\\n        <app-image-shell animation=\\\"gradient\\\" [src]=\\\"\\\" [alt]=\\\"\\\"></app-image-shell>\\r\\n      </app-aspect-ratio>\\r\\n    </div>\\r\\n  </section>\\r\\n  <section class=\\\"showcase-section\\\">\\r\\n    <p>\\r\\n      You can add/remove the following <b>Classes</b> to adjust the shell element behavior:\\r\\n    </p>\\r\\n    <h5>Overlay</h5>\\r\\n    <p>\\r\\n      This class adds a background overlay after the image has loaded.\\r\\n    </p>\\r\\n<pre>\\r\\n&lt;app-image-shell animation=\\\"spinner\\\" <b>class=\\\"add-overlay\\\"</b> [src]=\\\"''./assets/sample-images/travel/Travel2-64.47.png''\\\" [alt]=\\\"\\\"&gt;&lt;/app-image-shell&gt;\\r\\n</pre>\\r\\n    <div style=\\\"width:30%; margin: 0px auto;\\\">\\r\\n      <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\r\\n        <app-image-shell animation=\\\"spinner\\\" class=\\\"add-overlay\\\" [src]=\\\"'./assets/sample-images/travel/Travel2-64.47.png'\\\" [alt]=\\\"\\\"></app-image-shell>\\r\\n      </app-aspect-ratio>\\r\\n    </div>\\r\\n  </section>\\r\\n  <section class=\\\"showcase-section\\\">\\r\\n    <p>\\r\\n      You can also override these <b>CSS 4 variables</b> to adjust the shell element style\\r\\n    </p>\\r\\n    <h5>Background</h5>\\r\\n<pre>\\r\\napp-image-shell &#123;\\r\\n  --image-shell-loading-background: rgba(233, 30, 99, .25);\\r\\n&#125;\\r\\n</pre>\\r\\n    <div style=\\\"width:30%; margin: 0px auto;\\\">\\r\\n      <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\r\\n        <app-image-shell style=\\\"--image-shell-loading-background: rgba(233, 30, 99, .25);\\\" [src]=\\\"\\\" [alt]=\\\"\\\"></app-image-shell>\\r\\n      </app-aspect-ratio>\\r\\n    </div>\\r\\n    <h5>Overlay</h5>\\r\\n<pre>\\r\\napp-image-shell &#123;\\r\\n  --image-shell-overlay-background: rgba(103, 58, 183, .40);\\r\\n&#125;\\r\\n</pre>\\r\\n    <div style=\\\"width:30%; margin: 0px auto;\\\">\\r\\n      <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\r\\n        <app-image-shell style=\\\"--image-shell-overlay-background: rgba(103, 58, 183, .40);\\\" animation=\\\"spinner\\\" class=\\\"add-overlay\\\" [src]=\\\"'./assets/sample-images/travel/Travel2-64.47.png'\\\" [alt]=\\\"\\\"></app-image-shell>\\r\\n      </app-aspect-ratio>\\r\\n    </div>\\r\\n    <h5>Spinner</h5>\\r\\n<pre>\\r\\napp-image-shell &#123;\\r\\n  --image-shell-spinner-size: 40px;\\r\\n  --image-shell-spinner-color: #000000;\\r\\n&#125;\\r\\n</pre>\\r\\n    <div style=\\\"width:30%; margin: 0px auto;\\\">\\r\\n      <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\r\\n        <app-image-shell style=\\\"--image-shell-spinner-size: 40px; --image-shell-spinner-color: #000000;\\\" animation=\\\"spinner\\\" [src]=\\\"\\\" [alt]=\\\"\\\"></app-image-shell>\\r\\n      </app-aspect-ratio>\\r\\n    </div>\\r\\n    <h5>Background Animation</h5>\\r\\n    <p>\\r\\n      <b>Note:</b> These properties are only applied when using <code>animation=\\\"gradient\\\"</code>.\\r\\n    </p>\\r\\n<pre>\\r\\napp-image-shell &#123;\\r\\n  --image-shell-loading-background: rgba(255, 3, 109, 0.6);\\r\\n  --image-shell-animation-color: rgba(156, 4, 68, 0.7);\\r\\n&#125;\\r\\n</pre>\\r\\n    <div style=\\\"width:30%; margin: 0px auto;\\\">\\r\\n      <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\r\\n        <app-image-shell style=\\\"\\r\\n          --image-shell-loading-background: rgba(255, 3, 109, 0.6);\\r\\n          --image-shell-animation-color: rgba(156, 4, 68, 0.7);\\r\\n        \\\" animation=\\\"gradient\\\" [src]=\\\"\\\" [alt]=\\\"\\\"></app-image-shell>\\r\\n      </app-aspect-ratio>\\r\\n    </div>\\r\\n    <h5>Border Radius</h5>\\r\\n<pre>\\r\\napp-image-shell &#123;\\r\\n  --image-shell-border-radius: 10px;\\r\\n&#125;\\r\\n</pre>\\r\\n    <ion-row>\\r\\n      <ion-col>\\r\\n        <div style=\\\"width:80%; margin: 0px auto;\\\">\\r\\n          <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\r\\n            <app-image-shell style=\\\"--image-shell-border-radius: 10px;\\\" animation=\\\"spinner\\\" [src]=\\\"\\\" [alt]=\\\"\\\"></app-image-shell>\\r\\n          </app-aspect-ratio>\\r\\n        </div>\\r\\n      </ion-col>\\r\\n      <ion-col>\\r\\n        <div style=\\\"width:80%; margin: 0px auto;\\\">\\r\\n          <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\r\\n            <app-image-shell style=\\\"--image-shell-border-radius: 10px;\\\" animation=\\\"gradient\\\" [src]=\\\"\\\" [alt]=\\\"\\\"></app-image-shell>\\r\\n          </app-aspect-ratio>\\r\\n        </div>\\r\\n      </ion-col>\\r\\n    </ion-row>\\r\\n  </section>\\r\\n  <section class=\\\"showcase-section\\\">\\r\\n    <h2>Cover Image mode</h2>\\r\\n    <p>\\r\\n      In addition to the default <code>&lt;app-image-shell&gt;</code>, you can specify a <b>cover</b> mode if you want to display your image as a background-image.\\r\\n    </p>\\r\\n    <p>\\r\\n      This is different from the default mode, because (although it's not mandatory) cover mode is designed to contain content (for example some text)\\r\\n    </p>\\r\\n<pre>\\r\\n<b>&lt;app-image-shell [mode]=\\\"'cover'\\\" animation=\\\"spinner\\\" class=\\\"add-overlay\\\" [src]=\\\"\\\"&gt;</b>\\r\\n  &lt;app-aspect-ratio [ratio]=\\\"&#123;w:3, h:2&#125;\\\"&gt;\\r\\n    Some Text\\r\\n  &lt;/app-aspect-ratio&gt;\\r\\n<b>&lt;/app-image-shell&gt;</b>\\r\\n</pre>\\r\\n    <app-image-shell class=\\\"add-overlay\\\" animation=\\\"spinner\\\" [mode]=\\\"'cover'\\\" [src]=\\\"\\\">\\r\\n      <app-aspect-ratio [ratio]=\\\"{w:3, h:2}\\\">\\r\\n        <h4 style=\\\"margin: 10px;\\\">Some Text on top of a background-image container</h4>\\r\\n      </app-aspect-ratio>\\r\\n    </app-image-shell>\\r\\n  </section>\\r\\n  <section class=\\\"showcase-section\\\">\\r\\n    <h2>Usage</h2>\\r\\n    <p>\\r\\n      Let me explain you the differences between <b>default</b> and <b>cover</b> mode and when you should use each one.\\r\\n    </p>\\r\\n    <h5>Default Mode Usage</h5>\\r\\n    <p>\\r\\n      You should use the <b>default mode</b> when you are 100% confident on the aspect ratio of an image.\\r\\n    </p>\\r\\n    <p>\\r\\n      If the image ratio does not match the specified aspect ratio, the image will be stretched.\\r\\n    </p>\\r\\n    <p>\\r\\n      <b>Expected behavior:</b>\\r\\n      <br />\\r\\n      The image <b>WILL</b> be stretched.\\r\\n      <br />\\r\\n      We define an aspect ratio of <b>2:1</b> but the image has an aspect ratio of <b>1:1</b>.\\r\\n    </p>\\r\\n    <div style=\\\"width:80%; margin: 0px auto;\\\">\\r\\n      <app-aspect-ratio [ratio]=\\\"{w:2, h:1}\\\">\\r\\n        <app-image-shell animation=\\\"spinner\\\" [src]=\\\"'https://lorempixel.com/200/200/people/1/'\\\" [alt]=\\\"\\\"></app-image-shell>\\r\\n      </app-aspect-ratio>\\r\\n    </div>\\r\\n    <p>\\r\\n      <b>Expected behavior:</b>\\r\\n      <br />\\r\\n      The image <b>WON'T</b> be stretched.\\r\\n      <br />\\r\\n      We define an aspect ratio of <b>1:1</b> that matches the image ratio of <b>1:1</b>.\\r\\n    </p>\\r\\n    <div style=\\\"width:80%; margin: 0px auto;\\\">\\r\\n      <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\r\\n        <app-image-shell animation=\\\"spinner\\\" [src]=\\\"'https://lorempixel.com/200/200/people/1/'\\\" [alt]=\\\"\\\"></app-image-shell>\\r\\n      </app-aspect-ratio>\\r\\n    </div>\\r\\n    <h5>Cover Mode Usage</h5>\\r\\n    <p>\\r\\n      You should use the <b>cover mode</b> when you want to fill a container with an image and you don't care if the image is shown completly or a portion of it.\\r\\n    </p>\\r\\n    <p>\\r\\n      If the image ratio does not match the specified aspect ratio, the image will be cropped to fit the available space without stretching the image.\\r\\n    </p>\\r\\n    <p>\\r\\n      <b>Expected behavior:</b>\\r\\n      <br />\\r\\n      The image will be cropped to fill the available space.\\r\\n      <br />\\r\\n      We define an aspect ratio of <b>2:1</b> but the image has an aspect ratio of <b>1:1</b>.\\r\\n    </p>\\r\\n    <div style=\\\"width:80%; margin: 0px auto;\\\">\\r\\n      <app-image-shell animation=\\\"spinner\\\" [mode]=\\\"'cover'\\\" [src]=\\\"'https://lorempixel.com/200/200/people/1/'\\\">\\r\\n        <app-aspect-ratio [ratio]=\\\"{w:2, h:1}\\\">\\r\\n        </app-aspect-ratio>\\r\\n      </app-image-shell>\\r\\n    </div>\\r\\n    <p>\\r\\n      You can also change the <b>background-position</b> property to adjust how the image is placed inside the container.\\r\\n    </p>\\r\\n    <p>\\r\\n      <b>Notice:</b> This only applies to <b>cover</b> mode.\\r\\n    </p>\\r\\n<pre>\\r\\napp-image-shell[mode=\\\"cover\\\"] &#123;\\r\\n  background-position: bottom right;\\r\\n&#125;\\r\\n</pre>\\r\\n    <div style=\\\"width:80%; margin: 0px auto;\\\">\\r\\n      <app-image-shell style=\\\"background-position: bottom right;\\\" animation=\\\"spinner\\\" [mode]=\\\"'cover'\\\" [src]=\\\"'https://lorempixel.com/200/200/people/1/'\\\">\\r\\n        <app-aspect-ratio [ratio]=\\\"{w:2, h:1}\\\">\\r\\n        </app-aspect-ratio>\\r\\n      </app-image-shell>\\r\\n    </div>\\r\\n  </section>\\r\\n  <section class=\\\"showcase-section\\\">\\r\\n    <h2>Maintain Aspect Ratio</h2>\\r\\n    <p>\\r\\n      We use the handy <code>&lt;app-aspect-ratio&gt;</code> to ensure the image shell mantains a specified aspect ratio.\\r\\n    </p>\\r\\n    <p>\\r\\n      By doing so, we prevent content from jumping around the page while assets (images) are loading.\\r\\n    </p>\\r\\n    <h5>Default mode</h5>\\r\\n    <p>\\r\\n      Just surround the <code>&lt;app-image-shell&gt;</code> with an <code>&lt;app-aspect-ratio&gt;</code> element\\r\\n    </p>\\r\\n<pre>\\r\\n<b>&lt;app-aspect-ratio [ratio]=\\\"&#123;w:3, h:2&#125;\\\"&gt;</b>\\r\\n  &lt;app-image-shell animation=\\\"spinner\\\" [src]=\\\"\\\" [alt]=\\\"\\\"&gt;&lt;/app-image-shell&gt;\\r\\n<b>&lt;/app-aspect-ratio&gt;</b>\\r\\n</pre>\\r\\n    <div style=\\\"width:60%; margin: 0px auto;\\\">\\r\\n      <app-aspect-ratio [ratio]=\\\"{w:3, h:2}\\\">\\r\\n        <app-image-shell animation=\\\"spinner\\\" [src]=\\\"\\\" [alt]=\\\"\\\"></app-image-shell>\\r\\n      </app-aspect-ratio>\\r\\n    </div>\\r\\n    <h5>Cover mode</h5>\\r\\n    <p>\\r\\n      When using the <b>cover</b> mode we need to include the <code>&lt;app-aspect-ratio&gt;</code> inside the <code>&lt;app-image-shell&gt;</code> element instead of surrounding it.\\r\\n    </p>\\r\\n<pre>\\r\\n&lt;app-image-shell [mode]=\\\"'cover'\\\" animation=\\\"spinner\\\" class=\\\"add-overlay\\\" [src]=\\\"\\\"&gt;\\r\\n  <b>&lt;app-aspect-ratio [ratio]=\\\"&#123;w:3, h:2&#125;\\\"&gt;</b>\\r\\n    Some Text\\r\\n  <b>&lt;/app-aspect-ratio&gt;</b>\\r\\n&lt;/app-image-shell&gt;\\r\\n</pre>\\r\\n    <app-image-shell animation=\\\"spinner\\\" class=\\\"add-overlay\\\" [mode]=\\\"'cover'\\\" [src]=\\\"\\\">\\r\\n      <app-aspect-ratio [ratio]=\\\"{w:3, h:2}\\\">\\r\\n        <h4 style=\\\"margin: 10px;\\\">Some Text on top of a background-image container</h4>\\r\\n      </app-aspect-ratio>\\r\\n    </app-image-shell>\\r\\n  </section>\\r\\n\\r\\n  <ion-item-divider sticky=\\\"true\\\">\\r\\n    <ion-label>Text Shell</ion-label>\\r\\n  </ion-item-divider>\\r\\n  <section class=\\\"showcase-section\\\">\\r\\n    <p>\\r\\n      This component is useful when you want to show a loading indicator while fetching text data from the server.\\r\\n    </p>\\r\\n    <p>\\r\\n      The <code>&lt;app-text-shell&gt;</code> basically works by wrapping the text node with a loading indicator while you are fetching data.\\r\\n    </p>\\r\\n    <p>\\r\\n      While there are empty values the component adds some 'loading' styles and animations. Whereas while there are non empty values, the loading state is removed.\\r\\n    </p>\\r\\n    <p>\\r\\n      Try toggling the loading state of the text shells below by changing the value of this textarea.\\r\\n    </p>\\r\\n    <ion-textarea style=\\\"--background: #EEE;\\\" placeholder=\\\"When this text is empty the text-shell will show the loading state.\\\" clearOnEdit=\\\"true\\\" [(ngModel)]=\\\"sampleTextShellData\\\"></ion-textarea>\\r\\n    <p>\\r\\n      You can reset the 'loading' state by clearing the textarea value.\\r\\n    </p>\\r\\n  </section>\\r\\n  <section class=\\\"showcase-section\\\">\\r\\n    <h4>No animation (default)</h4>\\r\\n    <p>\\r\\n      Single line example\\r\\n    </p>\\r\\n    <div style=\\\"background-color: #FFF; padding: 20px;\\\">\\r\\n      <app-text-shell [data]=\\\"sampleTextShellData\\\"></app-text-shell>\\r\\n    </div>\\r\\n    <p>\\r\\n      Multi-line example\\r\\n    </p>\\r\\n    <div style=\\\"background-color: #FFF; padding: 20px;\\\">\\r\\n      <p>\\r\\n        <app-text-shell [data]=\\\"sampleTextShellData\\\" lines=\\\"3\\\"></app-text-shell>\\r\\n      </p>\\r\\n    </div>\\r\\n    <p>\\r\\n      On top of another element (with transparent background)\\r\\n    </p>\\r\\n    <div style=\\\"background-color: #FFF; padding: 20px; color: #FFF; font-weight: 500;\\\">\\r\\n      <app-image-shell animation=\\\"spinner\\\" class=\\\"add-overlay\\\" [mode]=\\\"'cover'\\\" [src]=\\\"'https://lorempixel.com/400/200/abstract/1/'\\\">\\r\\n        <app-aspect-ratio [ratio]=\\\"{w:2, h:1}\\\">\\r\\n          <p style=\\\"margin: 20px 40px;\\\">\\r\\n            <app-text-shell [data]=\\\"sampleTextShellData\\\" lines=\\\"3\\\"></app-text-shell>\\r\\n          </p>\\r\\n        </app-aspect-ratio>\\r\\n      </app-image-shell>\\r\\n    </div>\\r\\n  </section>\\r\\n  <section class=\\\"showcase-section\\\">\\r\\n    <h4>Bouncing animation</h4>\\r\\n    <p>\\r\\n      Single line example\\r\\n    </p>\\r\\n    <div style=\\\"background-color: #FFF; padding: 20px;\\\">\\r\\n      <app-text-shell [data]=\\\"sampleTextShellData\\\" animation=\\\"bouncing\\\"></app-text-shell>\\r\\n    </div>\\r\\n    <p>\\r\\n      Multi-line example\\r\\n    </p>\\r\\n    <div style=\\\"background-color: #FFF; padding: 20px;\\\">\\r\\n      <p>\\r\\n        <app-text-shell [data]=\\\"sampleTextShellData\\\" animation=\\\"bouncing\\\" lines=\\\"3\\\"></app-text-shell>\\r\\n      </p>\\r\\n    </div>\\r\\n    <p>\\r\\n      On top of another element (with transparent background)\\r\\n    </p>\\r\\n    <div style=\\\"background-color: #FFF; padding: 20px; color: #FFF; font-weight: 500;\\\">\\r\\n      <app-image-shell animation=\\\"spinner\\\" class=\\\"add-overlay\\\" [mode]=\\\"'cover'\\\" [src]=\\\"'https://lorempixel.com/400/200/nature/1/'\\\">\\r\\n        <app-aspect-ratio [ratio]=\\\"{w:2, h:1}\\\">\\r\\n          <p style=\\\"margin: 20px 40px;\\\">\\r\\n            <app-text-shell [data]=\\\"sampleTextShellData\\\" animation=\\\"bouncing\\\" lines=\\\"3\\\"></app-text-shell>\\r\\n          </p>\\r\\n        </app-aspect-ratio>\\r\\n      </app-image-shell>\\r\\n    </div>\\r\\n  </section>\\r\\n  <section class=\\\"showcase-section\\\">\\r\\n    <h4>Gradient animation</h4>\\r\\n    <p>\\r\\n      Single line example\\r\\n    </p>\\r\\n    <div style=\\\"background-color: #FFF; padding: 20px;\\\">\\r\\n      <app-text-shell [data]=\\\"sampleTextShellData\\\" animation=\\\"gradient\\\"></app-text-shell>\\r\\n    </div>\\r\\n    <p>\\r\\n      Multi-line example\\r\\n    </p>\\r\\n    <div style=\\\"background-color: #FFF; padding: 20px;\\\">\\r\\n      <p>\\r\\n        <app-text-shell [data]=\\\"sampleTextShellData\\\" animation=\\\"gradient\\\" lines=\\\"3\\\"></app-text-shell>\\r\\n      </p>\\r\\n    </div>\\r\\n    <p>\\r\\n      On top of another element (with transparent background)\\r\\n    </p>\\r\\n    <div style=\\\"background-color: #FFF; padding: 20px; color: #FFF; font-weight: 500;\\\">\\r\\n      <app-image-shell animation=\\\"spinner\\\" class=\\\"add-overlay\\\" [mode]=\\\"'cover'\\\" [src]=\\\"'https://lorempixel.com/400/200/city/1/'\\\">\\r\\n        <app-aspect-ratio [ratio]=\\\"{w:2, h:1}\\\">\\r\\n          <p style=\\\"margin: 20px 40px;\\\">\\r\\n            <app-text-shell [data]=\\\"sampleTextShellData\\\" animation=\\\"gradient\\\" lines=\\\"3\\\"></app-text-shell>\\r\\n          </p>\\r\\n        </app-aspect-ratio>\\r\\n      </app-image-shell>\\r\\n    </div>\\r\\n  </section>\\r\\n  <section class=\\\"showcase-section\\\">\\r\\n    <h4>Other use cases</h4>\\r\\n    <p>\\r\\n      The <code>&lt;app-text-shell&gt;</code> element can be used alone or wrapped with a text tag (<b>h1</b>, <b>h2</b>, <b>h3</b>, <b>p</b>, etc).\\r\\n    </p>\\r\\n    <p>\\r\\n      In case you wrap it with a heading element, we included basic styles (<code>src/theme/shell-defaults.scss</code>) to match the different heading styles (mainly line-height associated to each heading).\\r\\n    </p>\\r\\n<pre>\\r\\n:root &#123;\\r\\n  h1 > app-text-shell &#123;\\r\\n    --text-shell-line-height: 32px;\\r\\n    --text-shell-line-color: #CCC;\\r\\n  &#125;\\r\\n&#125;\\r\\n</pre>\\r\\n    <p>\\r\\n      By matching the line-height of the text-shell with the line-height of the wrapper element, we avoid page height bumps after the data gets loaded into the shells.\\r\\n    </p>\\r\\n<pre>\\r\\n&lt;h1&gt;\\r\\n  &lt;app-text-shell [data]=\\\"\\\"&gt;&lt;/app-text-shell&gt;\\r\\n&lt;/h1&gt;\\r\\n\\r\\n&lt;h2&gt;\\r\\n  &lt;app-text-shell [data]=\\\"\\\"&gt;&lt;/app-text-shell&gt;\\r\\n&lt;/h2&gt;\\r\\n\\r\\n&lt;h3&gt;\\r\\n  &lt;app-text-shell [data]=\\\"\\\"&gt;&lt;/app-text-shell&gt;\\r\\n&lt;/h3&gt;\\r\\n\\r\\n&lt;h4&gt;\\r\\n  &lt;app-text-shell [data]=\\\"\\\"&gt;&lt;/app-text-shell&gt;\\r\\n&lt;/h4&gt;\\r\\n\\r\\n&lt;h5&gt;\\r\\n  &lt;app-text-shell [data]=\\\"\\\"&gt;&lt;/app-text-shell&gt;\\r\\n&lt;/h5&gt;\\r\\n</pre>\\r\\n    <h1>\\r\\n      <app-text-shell [data]=\\\"\\\"></app-text-shell>\\r\\n    </h1>\\r\\n    <h2>\\r\\n      <app-text-shell [data]=\\\"\\\"></app-text-shell>\\r\\n    </h2>\\r\\n    <h3>\\r\\n      <app-text-shell [data]=\\\"\\\"></app-text-shell>\\r\\n    </h3>\\r\\n    <h4>\\r\\n      <app-text-shell [data]=\\\"\\\"></app-text-shell>\\r\\n    </h4>\\r\\n    <h5>\\r\\n      <app-text-shell [data]=\\\"\\\"></app-text-shell>\\r\\n    </h5>\\r\\n  </section>\\r\\n  <section class=\\\"showcase-section\\\">\\r\\n    <p>\\r\\n      You can add/remove the following <b>Attributes</b> to adjust the shell element behavior\\r\\n    </p>\\r\\n    <h5>Multi-line support</h5>\\r\\n    <p>\\r\\n      You can set up-to 6 lines\\r\\n    </p>\\r\\n<pre>\\r\\n&lt;p&gt;\\r\\n  &lt;app-text-shell <b>lines=\\\"6\\\"</b> [data]=\\\"\\\"&gt;&lt;/app-text-shell&gt;\\r\\n&lt;/p&gt;\\r\\n</pre>\\r\\n    <p>\\r\\n      <app-text-shell style=\\\"--text-shell-line-color: #DDD;\\\" [data]=\\\"\\\" lines=\\\"6\\\"></app-text-shell>\\r\\n    </p>\\r\\n    <h5>Set different animation options</h5>\\r\\n    <p>\\r\\n      You can choose between <b>no animation</b> (default), <b>bouncing animation</b>, and <b>gradient background with line masks on top</b>\\r\\n    </p>\\r\\n<pre>\\r\\n&lt;p&gt;\\r\\n  &lt;app-text-shell <b>animation=\\\"bouncing\\\"</b> lines=\\\"2\\\" [data]=\\\"\\\"&gt;&lt;/app-text-shell&gt;\\r\\n&lt;/p&gt;\\r\\n</pre>\\r\\n    <p>\\r\\n      <app-text-shell style=\\\"--text-shell-line-color: #DDD;\\\" [data]=\\\"\\\" animation=\\\"bouncing\\\" lines=\\\"2\\\"></app-text-shell>\\r\\n    </p>\\r\\n<pre>\\r\\n&lt;p&gt;\\r\\n  &lt;app-text-shell <b>animation=\\\"gradient\\\"</b> lines=\\\"2\\\" [data]=\\\"\\\"&gt;&lt;/app-text-shell&gt;\\r\\n&lt;/p&gt;\\r\\n</pre>\\r\\n<pre>\\r\\napp-text-shell &#123;\\r\\n  --text-shell-background: #FFF;\\r\\n  --text-shell-line-color: transparent;\\r\\n&#125;\\r\\n</pre>\\r\\n    <p style=\\\"padding: 5px; background: #FFF;\\\">\\r\\n      <app-text-shell style=\\\"--text-shell-line-color: transparent; --text-shell-background: #FFF;\\\" [data]=\\\"\\\" animation=\\\"gradient\\\" lines=\\\"2\\\"></app-text-shell>\\r\\n    </p>\\r\\n    <p>\\r\\n      In this mode, the <code>--text-shell-background</code> property refers to the masks colors.\\r\\n    </p>\\r\\n    <p>\\r\\n      <b>Note:</b> When using a <code>gradient</code> animation, make sure you set the line-color to transparent so the background animation that's beneath the masks can be seen.\\r\\n    </p>\\r\\n  </section>\\r\\n  <section class=\\\"showcase-section\\\">\\r\\n    <p>\\r\\n      You can also override these <b>CSS 4 variables</b> to adjust the shell element style\\r\\n    </p>\\r\\n    <h5>Line color</h5>\\r\\n<pre>\\r\\napp-text-shell &#123;\\r\\n  --text-shell-line-color: rgba(233, 30, 99, .25);\\r\\n&#125;\\r\\n</pre>\\r\\n    <h3>\\r\\n      <app-text-shell style=\\\"--text-shell-line-color: rgba(233, 30, 99, .25);\\\" [data]=\\\"\\\"></app-text-shell>\\r\\n    </h3>\\r\\n    <h5>Background</h5>\\r\\n    <p>\\r\\n      Background by default is set to <b>transparent</b>.\\r\\n    </p>\\r\\n<pre>\\r\\napp-text-shell &#123;\\r\\n  --text-shell-line-color: #FFFFFF;\\r\\n  --text-shell-background: #000000;\\r\\n&#125;\\r\\n</pre>\\r\\n    <p style=\\\"padding: 5px; background: #000000;\\\">\\r\\n      <app-text-shell style=\\\"--text-shell-line-color: #FFFFFF; --text-shell-background: #000000;\\\" [data]=\\\"\\\" lines=\\\"3\\\"></app-text-shell>\\r\\n    </p>\\r\\n    <h5>Background Animation</h5>\\r\\n    <p>\\r\\n      <b>Note:</b> These properties are only applied when using <code>animation=\\\"gradient\\\"</code>.\\r\\n    </p>\\r\\n<pre>\\r\\napp-text-shell &#123;\\r\\n  --text-shell-line-color: transparent;\\r\\n  --text-shell-background: #000000;\\r\\n  --text-shell-animation-background: rgba(255, 3, 109, 0.6);\\r\\n  --text-shell-animation-color: rgba(156, 4, 68, 0.7);\\r\\n&#125;\\r\\n</pre>\\r\\n    <p style=\\\"padding: 5px; background: #000000;\\\">\\r\\n      <app-text-shell style=\\\"\\r\\n        --text-shell-line-color: transparent;\\r\\n        --text-shell-background: #000000;\\r\\n        --text-shell-animation-background: rgba(255, 3, 109, 0.6);\\r\\n        --text-shell-animation-color: rgba(156, 4, 68, 0.7);\\r\\n      \\\" [data]=\\\"\\\" lines=\\\"3\\\" animation=\\\"gradient\\\"></app-text-shell>\\r\\n    </p>\\r\\n    <h5>Line height</h5>\\r\\n<pre>\\r\\napp-text-shell &#123;\\r\\n  --text-shell-line-height: 40px;\\r\\n&#125;\\r\\n</pre>\\r\\n    <h3>\\r\\n      <app-text-shell style=\\\"--text-shell-line-height: 40px;\\\" [data]=\\\"\\\"></app-text-shell>\\r\\n    </h3>\\r\\n    <h5>Line gutter</h5>\\r\\n<pre>\\r\\napp-text-shell &#123;\\r\\n  --text-shell-line-gutter: 10px;\\r\\n&#125;\\r\\n</pre>\\r\\n    <p>\\r\\n      <app-text-shell style=\\\"--text-shell-line-gutter: 10px; --text-shell-line-color: #CCC;\\\" [data]=\\\"\\\" lines=\\\"4\\\"></app-text-shell>\\r\\n    </p>\\r\\n  </section>\\r\\n\\r\\n  <ion-item-divider sticky=\\\"true\\\">\\r\\n    <ion-label>Binding Data to Shell Elements</ion-label>\\r\\n  </ion-item-divider>\\r\\n  <section class=\\\"showcase-section\\\">\\r\\n    <p>\\r\\n      You can combine the different shell elements in multiple ways to fit your needs\\r\\n    </p>\\r\\n    <ion-row style=\\\"background-color: #FFF; padding: 10px; margin: 20px;\\\">\\r\\n      <ion-col size=\\\"12\\\">\\r\\n        <app-image-shell animation=\\\"spinner\\\" class=\\\"add-overlay\\\" [mode]=\\\"'cover'\\\" [src]=\\\"\\\">\\r\\n          <app-aspect-ratio [ratio]=\\\"{w:2, h:1}\\\">\\r\\n            <h4 style=\\\"margin: 10px; text-align: center;\\\">Text on top of a background-image container</h4>\\r\\n          </app-aspect-ratio>\\r\\n        </app-image-shell>\\r\\n      </ion-col>\\r\\n      <ion-col size=\\\"4\\\">\\r\\n        <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\r\\n          <app-image-shell animation=\\\"spinner\\\" [src]=\\\"\\\" [alt]=\\\"'Sample Image'\\\"></app-image-shell>\\r\\n        </app-aspect-ratio>\\r\\n      </ion-col>\\r\\n      <ion-col size=\\\"8\\\">\\r\\n        <h3 style=\\\"margin-top: 0px;\\\">\\r\\n          <app-text-shell [data]=\\\"\\\"></app-text-shell>\\r\\n        </h3>\\r\\n        <p>\\r\\n          <app-text-shell [data]=\\\"\\\" lines=\\\"3\\\"></app-text-shell>\\r\\n        </p>\\r\\n      </ion-col>\\r\\n    </ion-row>\\r\\n  </section>\\r\\n  <section class=\\\"showcase-section\\\">\\r\\n    <h5>Fetch data with the HttpClient</h5>\\r\\n    <p>\\r\\n      Let's set a timeout and fetch data using the <code>HttpClient</code>\\r\\n    </p>\\r\\n    <p>\\r\\n      Data coming in <b>{{ simpleFetchCountdown }} seconds</b>\\r\\n    </p>\\r\\n    <ion-row style=\\\"background-color: #FFF; padding: 10px; margin: 20px;\\\">\\r\\n      <ion-col size=\\\"12\\\">\\r\\n        <app-image-shell animation=\\\"gradient\\\" class=\\\"add-overlay\\\" [mode]=\\\"'cover'\\\" [src]=\\\"simpleFetchData?.cover\\\" [alt]=\\\"'Sample Image Cover'\\\">\\r\\n          <app-aspect-ratio [ratio]=\\\"{w:2, h:1}\\\">\\r\\n            <h4 style=\\\"margin: 10px; text-align: center; color: #FFF;\\\">Heading on top of a cover image</h4>\\r\\n          </app-aspect-ratio>\\r\\n        </app-image-shell>\\r\\n      </ion-col>\\r\\n      <ion-col size=\\\"4\\\">\\r\\n        <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\r\\n          <app-image-shell animation=\\\"gradient\\\" [src]=\\\"simpleFetchData?.image\\\" [alt]=\\\"'Sample Image'\\\"></app-image-shell>\\r\\n        </app-aspect-ratio>\\r\\n      </ion-col>\\r\\n      <ion-col size=\\\"8\\\">\\r\\n        <h3 style=\\\"margin-top: 0px;\\\">\\r\\n          <app-text-shell animation=\\\"gradient\\\" [data]=\\\"simpleFetchData?.title\\\"></app-text-shell>\\r\\n        </h3>\\r\\n        <p>\\r\\n          <app-text-shell animation=\\\"gradient\\\" [data]=\\\"simpleFetchData?.description\\\" lines=\\\"3\\\"></app-text-shell>\\r\\n        </p>\\r\\n      </ion-col>\\r\\n    </ion-row>\\r\\n    <ion-button (click)=\\\"showcaseShellSimpleFetch(3)\\\" [disabled]=\\\"simpleFetchButtonDisabled\\\">Fetch more Data</ion-button>\\r\\n  </section>\\r\\n  <section class=\\\"showcase-section\\\">\\r\\n    <h5>Fetch data using ShellProvider</h5>\\r\\n    <p>\\r\\n      Using the <code>ShellProvider</code> utility you can reduce the amount of boilerplate from the previous example and achieve the same behavior.\\r\\n    </p>\\r\\n    <ion-row style=\\\"background-color: #FFF; padding: 10px; margin: 20px;\\\">\\r\\n      <ion-col size=\\\"12\\\">\\r\\n        <app-image-shell animation=\\\"spinner\\\" class=\\\"add-overlay\\\" [mode]=\\\"'cover'\\\" [src]=\\\"(shellProviderData | async)?.cover\\\" [alt]=\\\"'Sample Image Cover'\\\">\\r\\n          <app-aspect-ratio [ratio]=\\\"{w:2, h:1}\\\">\\r\\n            <h4 style=\\\"margin: 10px; text-align: center; color: #FFF;\\\">Heading on top of a cover image</h4>\\r\\n          </app-aspect-ratio>\\r\\n        </app-image-shell>\\r\\n      </ion-col>\\r\\n      <ion-col size=\\\"4\\\">\\r\\n        <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\r\\n          <app-image-shell animation=\\\"spinner\\\" [src]=\\\"(shellProviderData | async)?.image\\\" [alt]=\\\"'Sample Image'\\\"></app-image-shell>\\r\\n        </app-aspect-ratio>\\r\\n      </ion-col>\\r\\n      <ion-col size=\\\"8\\\">\\r\\n        <h3 style=\\\"margin-top: 0px;\\\">\\r\\n          <app-text-shell [data]=\\\"(shellProviderData | async)?.title\\\"></app-text-shell>\\r\\n        </h3>\\r\\n        <p>\\r\\n          <app-text-shell [data]=\\\"(shellProviderData | async)?.description\\\" lines=\\\"3\\\"></app-text-shell>\\r\\n        </p>\\r\\n      </ion-col>\\r\\n    </ion-row>\\r\\n    <ion-button (click)=\\\"showcaseShellProvider()\\\" [disabled]=\\\"shellProviderButtonDisabled\\\">Fetch more Data</ion-button>\\r\\n  </section>\\r\\n</ion-content>\\r\\n\"","module.exports = \".showcase-content {\\n  --background: var(--app-background); }\\n  .showcase-content ion-item-divider {\\n    --background: var(--ion-color-secondary);\\n    --color: var(--ion-color-lightest);\\n    text-transform: uppercase;\\n    font-weight: 500;\\n    letter-spacing: 1px; }\\n  .showcase-content .showcase-section {\\n    margin: 20px 20px 100px; }\\n  .showcase-content pre {\\n    font-size: 14px;\\n    background: #CCC;\\n    padding: 10px; }\\n  .showcase-content code {\\n    color: #F92672;\\n    font-weight: 500; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc2hvd2Nhc2UvYXBwLXNoZWxsL0M6XFxQcm9qZWN0c1xcQXBwbGljYXRpb25zXFxpb25pYzQtZnVsbC1zdGFydGVyLWFwcC0xLjIvc3JjXFxhcHBcXHNob3djYXNlXFxhcHAtc2hlbGxcXGFwcC1zaGVsbC5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxtQ0FBYSxFQUFBO0VBRGY7SUFJSSx3Q0FBYTtJQUNiLGtDQUFRO0lBQ1IseUJBQXlCO0lBQ3pCLGdCQUFnQjtJQUNoQixtQkFBbUIsRUFBQTtFQVJ2QjtJQVlJLHVCQUF1QixFQUFBO0VBWjNCO0lBZ0JJLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIsYUFBYSxFQUFBO0VBbEJqQjtJQXNCSSxjQUFjO0lBQ2QsZ0JBQWdCLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9zaG93Y2FzZS9hcHAtc2hlbGwvYXBwLXNoZWxsLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5zaG93Y2FzZS1jb250ZW50IHtcclxuICAtLWJhY2tncm91bmQ6IHZhcigtLWFwcC1iYWNrZ3JvdW5kKTtcclxuXHJcbiAgaW9uLWl0ZW0tZGl2aWRlciB7XHJcbiAgICAtLWJhY2tncm91bmQ6IHZhcigtLWlvbi1jb2xvci1zZWNvbmRhcnkpO1xyXG4gICAgLS1jb2xvcjogdmFyKC0taW9uLWNvbG9yLWxpZ2h0ZXN0KTtcclxuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiAgICBmb250LXdlaWdodDogNTAwO1xyXG4gICAgbGV0dGVyLXNwYWNpbmc6IDFweDtcclxuICB9XHJcblxyXG4gIC5zaG93Y2FzZS1zZWN0aW9uIHtcclxuICAgIG1hcmdpbjogMjBweCAyMHB4IDEwMHB4O1xyXG4gIH1cclxuXHJcbiAgcHJlIHtcclxuICAgIGZvbnQtc2l6ZTogMTRweDtcclxuICAgIGJhY2tncm91bmQ6ICNDQ0M7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG4gIH1cclxuXHJcbiAgY29kZSB7XHJcbiAgICBjb2xvcjogI0Y5MjY3MjtcclxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XHJcbiAgfVxyXG59XHJcbiJdfQ== */\"","import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable, timer, interval } from 'rxjs';\r\nimport { takeUntil, finalize, take } from 'rxjs/operators';\r\n\r\nimport { ShellProvider } from '../../utils/shell-provider';\r\n\r\n// You can use a plain interface as a shell model\r\n// interface IShell {\r\n//   cover: string;\r\n//   image: string;\r\n//   title: string;\r\n//   description: string;\r\n// }\r\n\r\n// You can also use a Class object as a shell model\r\n// import { ShowcaseShellModel } from '../showcase-shell.model';\r\n\r\n@Component({\r\n  selector: 'app-showcase-shell',\r\n  templateUrl: './app-shell.page.html',\r\n  styleUrls: ['./app-shell.page.scss']\r\n})\r\nexport class AppShellPage implements OnInit {\r\n  sampleTextShellData = '';\r\n\r\n  // We will manually fetch data using the HttpClient and assign it to this property\r\n  simpleFetchData: {\r\n    cover: string,\r\n    image: string,\r\n    title: string,\r\n    description: string\r\n  };\r\n  // You can also define the type of the property using the IShell interface or the ShowcaseShellModel class\r\n  // simpleFetchData: IShell;\r\n  // simpleFetchData: ShowcaseShellModel;\r\n\r\n  // Fetch data with the ShellProvider utility and assign it to this property\r\n  // ShellProvider data is async (Observable)\r\n  shellProviderData: Observable<{\r\n    cover: string,\r\n    image: string,\r\n    title: string,\r\n    description: string\r\n  }>;\r\n  // You can also define the type of the property using the IShell interface or the ShowcaseShellModel class\r\n  // shellProviderData: Observable<IShell>;\r\n  // shellProviderData: Observable<ShowcaseShellModel>;\r\n\r\n  // Aux properties for the Simple Fetch (HttpClient) showcase\r\n  simpleFetchButtonDisabled = true;\r\n  simpleFetchCountdown = 0;\r\n  simpleFetchInterval: Observable<any>;\r\n\r\n  // Aux properties for the ShellProvider showcase\r\n  shellProviderButtonDisabled = true;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  ngOnInit(): void {\r\n    this.showcaseShellSimpleFetch(10);\r\n    this.showcaseShellProvider();\r\n  }\r\n\r\n  showcaseShellSimpleFetch(countdown: number): void {\r\n    // Assign an (empty / null) value to the shell object to restore it's 'loading' state\r\n    this.simpleFetchData = null;\r\n\r\n    // Prevent rage clicks on the 'Fetch more Data' button\r\n    this.simpleFetchButtonDisabled = true;\r\n\r\n    // Start a countdown and an interval before executing the fetch function\r\n    this.simpleFetchCountdown = countdown;\r\n    this.simpleFetchInterval = interval(1000);\r\n\r\n    // Start a countdown to showcase the shell elements animations for a few seconds before the data get's fetched into the shell object\r\n    const timer$ = timer(countdown * 1000);\r\n    // When timer emits after X seconds, complete source\r\n    this.simpleFetchInterval\r\n    .pipe(\r\n      takeUntil(timer$),\r\n      finalize(() => this.simpleFetchButtonDisabled = false)\r\n    )\r\n    .subscribe({\r\n      next: () => {\r\n        this.simpleFetchCountdown --;\r\n      },\r\n      complete: () => {\r\n        this.simpleFetchCountdown = 0;\r\n        // Once the countdown ends, fetch data using the HttpClient\r\n        // You can also define the type of the property using the IShell interface or the ShowcaseShellModel class\r\n        // this.http.get<IShell>('./assets/sample-data/showcase/shell.json');\r\n        // this.http.get<ShowcaseShellModel>('./assets/sample-data/showcase/shell.json');\r\n        this.http.get<{\r\n          cover: string,\r\n          image: string,\r\n          title: string,\r\n          description: string\r\n        }>('./assets/sample-data/showcase/shell.json')\r\n        .pipe(\r\n          take(1) // Force Observable to complete\r\n        ).subscribe(val => {\r\n          console.log('Fetching shell data using the HttpClient', val);\r\n          this.simpleFetchData = val;\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  showcaseShellProvider(): void {\r\n    // Prevent rage clicks on the 'Fetch more Data' button\r\n    this.shellProviderButtonDisabled = true;\r\n\r\n    const shellObject: {\r\n      cover: string,\r\n      image: string,\r\n      title: string,\r\n      description: string\r\n    } = {\r\n      cover: '',\r\n      image: '',\r\n      title: '',\r\n      description: ''\r\n    };\r\n\r\n    const shellProvider = new ShellProvider(\r\n      shellObject,\r\n      this.http.get<{\r\n        cover: string,\r\n        image: string,\r\n        title: string,\r\n        description: string\r\n      }>('./assets/sample-data/showcase/shell.json')\r\n      // You can also define the type of the property using the IShell interface or the ShowcaseShellModel class\r\n      // this.http.get<IShell>('./assets/sample-data/showcase/shell.json');\r\n      // this.http.get<ShowcaseShellModel>('./assets/sample-data/showcase/shell.json');\r\n    );\r\n\r\n    this.shellProviderData = shellProvider.observable.pipe(\r\n      take(2), // ShellProvider will emit a mock object and the real data fetched from the source. Emit those two values and then complete.\r\n      finalize(() => this.shellProviderButtonDisabled = false)\r\n    );\r\n  }\r\n}\r\n","import { Observable, BehaviorSubject, forkJoin, of } from 'rxjs';\r\nimport { first, delay } from 'rxjs/operators';\r\n\r\nimport { environment } from '../../environments/environment';\r\n\r\nexport class ShellProvider<T> {\r\n  private _observable: Observable<T>;\r\n\r\n  // A Subject that requires an initial value and emits its current value to new subscribers\r\n  // If we choose a BehaviorSubject, new subscribers will only get the latest value (real data).\r\n  // This is useful for repeated use of the resolved data (navigate to a page, go back, navigate to the same page again)\r\n  private _subject: BehaviorSubject<T>;\r\n\r\n  // We wait on purpose 2 secs on local environment when fetching from json to simulate the backend roundtrip.\r\n  // However, in production you should set this delay to 0 in the environment.ts file.\r\n  private networkDelay = (environment && environment.shell && environment.shell.networkDelay) ? environment.shell.networkDelay : 0;\r\n  // To debug shell styles, change configuration in the environment.ts file\r\n  private debugMode = (environment && environment.shell && environment.shell.debug) ? environment.shell.debug : false;\r\n\r\n  constructor(shellModel: T, dataObservable: Observable<T>) {\r\n    // tslint:disable-next-line:max-line-length\r\n    const shellClassName = (shellModel && shellModel.constructor && shellModel.constructor.name) ? shellModel.constructor.name : 'No Class Name';\r\n\r\n    // tslint:disable-next-line:no-console\r\n    console.time('[' + shellClassName + '] ShellProvider roundtrip');\r\n    // Set the shell model as the initial value\r\n    this._subject = new BehaviorSubject<T>(shellModel);\r\n\r\n    const delayObservable = of(true).pipe(\r\n      delay(this.networkDelay)\r\n      // finalize(() => console.log('delayObservable COMPLETED'))\r\n    );\r\n\r\n    dataObservable.pipe(\r\n      first() // Prevent the need to unsubscribe because .first() completes the observable\r\n      // finalize(() => console.log('dataObservable COMPLETED'))\r\n    );\r\n\r\n    // Put both delay and data Observables in a forkJoin so they execute in parallel so that\r\n    // the delay caused (on purpose) by the delayObservable doesn't get added to the time the dataObservable takes to complete\r\n    const forkedObservables = forkJoin(\r\n      delayObservable,\r\n      dataObservable\r\n    )\r\n    .pipe(\r\n      // finalize(() => console.log('forkedObservables COMPLETED'))\r\n    )\r\n    .subscribe(([delayValue, dataValue]: [boolean, T]) => {\r\n      if (!this.debugMode) {\r\n        this._subject.next(dataValue);\r\n        // tslint:disable-next-line:no-console\r\n        console.timeEnd('[' + shellClassName + '] ShellProvider roundtrip');\r\n      }\r\n    });\r\n\r\n    this._observable = this._subject.asObservable();\r\n  }\r\n\r\n  public get observable(): Observable<T> {\r\n    return this._observable;\r\n  }\r\n}\r\n"],"sourceRoot":""}